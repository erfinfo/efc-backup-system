const express = require('express');
const path = require('path');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const dotenv = require('dotenv');

// Charger les variables d'environnement en premier
dotenv.config();

const { initDatabase } = require('./utils/database');
const { logger } = require('./utils/logger');
const backupScheduler = require('./backup/scheduler');
const systemMonitor = require('./monitor/systemMonitor');
const apiRoutes = require('./api/routes');
const { notificationService } = require('./utils/notification');

const app = express();
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';

// Middleware de s√©curit√© et performance - Adapt√© pour HTTP
app.use(helmet({
    contentSecurityPolicy: false,  // D√©sactiv√© pour simplifier en HTTP
    crossOriginOpenerPolicy: false,  // D√©sactiv√© pour √©viter l'erreur COOP
    originAgentCluster: false  // D√©sactiv√© pour √©viter l'erreur cluster
}));
app.use(compression());
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Middleware de logging des requ√™tes
app.use((req, res, next) => {
    if (process.env.LOG_LEVEL === 'debug') {
        logger.debug(`${req.method} ${req.url}`, {
            ip: req.ip,
            userAgent: req.get('User-Agent')
        });
    }
    next();
});

// Servir les fichiers statiques avec cache
app.use(express.static(path.join(__dirname, '../web'), {
    maxAge: process.env.NODE_ENV === 'production' ? '1d' : '0'
}));

// Routes API
app.use('/api', apiRoutes);

// Route principale avec fallback pour SPA
app.get('*', (req, res) => {
    // Si c'est une route API non trouv√©e, retourner 404
    if (req.path.startsWith('/api/')) {
        return res.status(404).json({ error: 'Endpoint non trouv√©' });
    }
    
    // Sinon, servir l'interface web
    res.sendFile(path.join(__dirname, '../web/index.html'));
});

// Initialisation compl√®te du syst√®me
async function initialize() {
    try {
        logger.info('üöÄ D√©marrage EFC Backup System...');
        logger.info(`Version Node.js: ${process.version}`);
        logger.info(`Environnement: ${process.env.NODE_ENV || 'development'}`);

        // 1. Initialiser la base de donn√©es
        logger.info('üìä Initialisation de la base de donn√©es...');
        await initDatabase();
        logger.info('‚úÖ Base de donn√©es initialis√©e');

        // 2. D√©marrer le monitoring syst√®me
        logger.info('üìà D√©marrage du monitoring syst√®me...');
        systemMonitor.start();
        logger.info('‚úÖ Monitoring syst√®me d√©marr√©');

        // 3. Initialiser et d√©marrer le planificateur de backup
        logger.info('‚è∞ Initialisation du planificateur de backups...');
        await backupScheduler.init();
        backupScheduler.start();
        logger.info('‚úÖ Planificateur de backups d√©marr√©');

        // 4. Test de la configuration des notifications
        logger.info('üìß Test de la configuration des notifications...');
        const notifTest = await notificationService.testConfiguration();
        if (notifTest.success) {
            logger.info('‚úÖ Notifications configur√©es et op√©rationnelles');
        } else {
            logger.warn(`‚ö†Ô∏è Notifications: ${notifTest.error || notifTest.message}`);
        }

        // 5. D√©marrer le serveur HTTP
        const server = app.listen(PORT, HOST, () => {
            logger.info('üåê Serveur HTTP d√©marr√©');
            logger.info(`üì± Interface web: http://${HOST === '0.0.0.0' ? 'localhost' : HOST}:${PORT}`);
            logger.info('üéâ EFC Backup System op√©rationnel !');
            
            // Log du r√©sum√© de configuration
            logConfigurationSummary();
        });

        // Configuration du serveur
        server.timeout = 300000; // 5 minutes timeout pour les gros backups
        server.keepAliveTimeout = 65000;
        server.headersTimeout = 66000;

        // 6. Envoyer notification de d√©marrage si configur√©
        if (process.env.SEND_STARTUP_NOTIFICATIONS === 'true') {
            setTimeout(async () => {
                try {
                    await notificationService.sendSystemAlert('info', 
                        'Syst√®me d√©marr√©', 
                        'EFC Backup System a √©t√© d√©marr√© avec succ√®s',
                        {
                            version: '1.0.0',
                            port: PORT,
                            hostname: process.env.HOSTNAME || 'EFC-Backup-Server',
                            nodeVersion: process.version
                        }
                    );
                } catch (error) {
                    logger.warn('Impossible d\'envoyer la notification de d√©marrage:', error);
                }
            }, 5000); // Attendre 5 secondes pour s'assurer que tout est initialis√©
        }

    } catch (error) {
        logger.error('‚ùå Erreur critique lors de l\'initialisation:', error);
        process.exit(1);
    }
}

function logConfigurationSummary() {
    logger.info('üìã Configuration syst√®me:');
    logger.info(`   ‚Ä¢ Port serveur: ${PORT}`);
    logger.info(`   ‚Ä¢ Chemin backups: ${process.env.BACKUP_PATH || '/var/backups/efc'}`);
    logger.info(`   ‚Ä¢ R√©tention: ${process.env.RETENTION_DAYS || '30'} jours`);
    logger.info(`   ‚Ä¢ Backups parall√®les: ${process.env.MAX_PARALLEL_BACKUPS || '2'}`);
    logger.info(`   ‚Ä¢ VSS activ√©: ${process.env.USE_VSS !== 'false'}`);
    logger.info(`   ‚Ä¢ Notifications: ${process.env.SMTP_ENABLED === 'true' ? 'Activ√©es' : 'D√©sactiv√©es'}`);
    logger.info(`   ‚Ä¢ Niveau de logs: ${process.env.LOG_LEVEL || 'info'}`);
}

// Gestion avanc√©e des erreurs
process.on('unhandledRejection', (reason, promise) => {
    logger.error('üö® Unhandled Rejection:', reason);
    logger.error('Promise:', promise);
    
    // En production, red√©marrer gracieusement
    if (process.env.NODE_ENV === 'production') {
        setTimeout(() => {
            logger.error('Red√©marrage du processus suite √† une erreur non g√©r√©e');
            process.exit(1);
        }, 1000);
    }
});

process.on('uncaughtException', (error) => {
    logger.error('üö® Uncaught Exception:', error);
    
    // Nettoyage d'urgence
    performEmergencyCleanup();
    process.exit(1);
});

// Arr√™t propre du syst√®me
process.on('SIGINT', handleShutdown);
process.on('SIGTERM', handleShutdown);

async function handleShutdown(signal) {
    logger.info(`üõë Signal ${signal} re√ßu, arr√™t du syst√®me...`);
    
    try {
        // 1. Arr√™ter le planificateur de backups
        logger.info('‚è∞ Arr√™t du planificateur...');
        backupScheduler.stop();
        
        // 2. Arr√™ter le monitoring
        logger.info('üìà Arr√™t du monitoring...');
        systemMonitor.stop();
        
        // 3. Notification d'arr√™t si configur√©
        if (process.env.SEND_SHUTDOWN_NOTIFICATIONS === 'true') {
            await notificationService.sendSystemAlert('info',
                'Syst√®me arr√™t√©',
                'EFC Backup System a √©t√© arr√™t√© proprement',
                { timestamp: new Date().toISOString() }
            );
        }
        
        // 4. Fermer la base de donn√©es
        logger.info('üìä Fermeture de la base de donn√©es...');
        const { db } = require('./utils/database');
        await db.close();
        
        logger.info('‚úÖ Arr√™t termin√© proprement');
        process.exit(0);
        
    } catch (error) {
        logger.error('‚ùå Erreur lors de l\'arr√™t:', error);
        process.exit(1);
    }
}

function performEmergencyCleanup() {
    logger.info('üö® Nettoyage d\'urgence...');
    
    try {
        // Arr√™ter les composants critiques
        backupScheduler.stop();
        systemMonitor.stop();
        
        // Sauvegarder les donn√©es critiques si possible
        backupScheduler.getScheduleStatus();
        
    } catch (error) {
        logger.error('Erreur lors du nettoyage d\'urgence:', error);
    }
}

// Gestion des warnings Node.js
process.on('warning', (warning) => {
    logger.warn(`Node.js Warning: ${warning.name} - ${warning.message}`);
    if (warning.stack) {
        logger.debug(`Stack trace: ${warning.stack}`);
    }
});

// Surveillance de la m√©moire
if (process.env.NODE_ENV === 'production') {
    setInterval(() => {
        const memUsage = process.memoryUsage();
        const memUsageMB = Math.round(memUsage.rss / 1024 / 1024);
        
        if (memUsageMB > 1024) { // Plus de 1GB
            logger.warn(`Utilisation m√©moire √©lev√©e: ${memUsageMB}MB`);
        }
        
        if (memUsageMB > 2048) { // Plus de 2GB
            logger.error(`Utilisation m√©moire critique: ${memUsageMB}MB`);
            // Envoyer une alerte
            notificationService.sendSystemAlert('critical',
                'Utilisation m√©moire critique',
                `Le serveur EFC Backup utilise ${memUsageMB}MB de m√©moire`,
                { memoryUsage: memUsage }
            );
        }
    }, 60000); // V√©rifier toutes les minutes
}

// D√©marrer l'application
if (require.main === module) {
    initialize();
}

module.exports = app;